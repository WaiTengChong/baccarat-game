 const express = require('express');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cors());

console.log('ðŸ”„ Starting simple fallback server...');

// In-memory storage for simple functionality
const simulations = new Map();
let simulationCounter = 0;

// Health check endpoint
app.get('/api/health', (req, res) => {
  console.log('Health check requested');
  res.json({ 
    status: 'ok', 
    mode: 'simple',
    message: 'Running simple server without database'
  });
});

// Simple simulation endpoint (in-memory only)
app.post('/api/simulations', (req, res) => {
  console.log('Simulation requested:', req.body);
  
  const simulationId = 'simple-' + (++simulationCounter);
  const simulation = {
    id: simulationId,
    status: 'completed',
    progress: 100,
    plays: req.body.plays || 1,
    gamesPerPlay: req.body.gamesPerPlay || 1,
    handsPerGame: req.body.handsPerGame || 10,
    created: new Date(),
    results: generateMockResults(req.body.plays || 1, req.body.gamesPerPlay || 1)
  };
  
  simulations.set(simulationId, simulation);
  
  res.json({ 
    id: simulationId,
    status: 'completed',
    message: 'Running in simple mode - mock data generated'
  });
});

// Generate mock baccarat results
function generateMockResults(plays, gamesPerPlay) {
  const results = [];
  
  for (let play = 1; play <= plays; play++) {
    const playData = {
      playNumber: play,
      games: []
    };
    
    for (let game = 1; game <= gamesPerPlay; game++) {
      const hands = [];
      const totalHands = Math.floor(Math.random() * 20) + 10; // 10-30 hands
      let bankerWins = 0, playerWins = 0, tieWins = 0;
      
      for (let hand = 1; hand <= totalHands; hand++) {
        const results = ['Banker', 'Player', 'Tie'];
        const result = results[Math.floor(Math.random() * results.length)];
        
        if (result === 'Banker') bankerWins++;
        else if (result === 'Player') playerWins++;
        else tieWins++;
        
        hands.push({
          handNumber: hand,
          result: result,
          playerTotal: Math.floor(Math.random() * 10),
          bankerTotal: Math.floor(Math.random() * 10),
          playerCards: ['Aâ™ ', '5â™¦'],
          bankerCards: ['Kâ™£', '3â™¥'],
          bankerPair: Math.random() < 0.1,
          playerPair: Math.random() < 0.1
        });
      }
      
      playData.games.push({
        gameNumber: game,
        gameId: `${play}-${game}`,
        totalHands: totalHands,
        bankerWins: bankerWins,
        playerWins: playerWins,
        tieWins: tieWins,
        bankerPairs: Math.floor(Math.random() * 3),
        playerPairs: Math.floor(Math.random() * 3),
        hands: hands
      });
    }
    
    results.push(playData);
  }
  
  return results;
}

// Get simulation status
app.get('/api/simulations/:id/status', (req, res) => {
  const simulation = simulations.get(req.params.id);
  if (!simulation) {
    return res.status(404).json({ error: 'Simulation not found' });
  }
  
  res.json({ 
    status: simulation.status, 
    progress: simulation.progress 
  });
});

// Get simulation results
app.get('/api/simulations/:id/results', (req, res) => {
  const simulation = simulations.get(req.params.id);
  if (!simulation) {
    return res.status(404).json({ error: 'Simulation not found' });
  }
  
  res.json({ 
    plays: simulation.results,
    message: 'Mock data generated by simple server'
  });
});

// Get games for a specific play
app.get('/api/simulations/:id/plays/:playNumber/games', (req, res) => {
  const simulation = simulations.get(req.params.id);
  if (!simulation) {
    return res.status(404).json({ error: 'Simulation not found' });
  }
  
  const playNumber = parseInt(req.params.playNumber);
  const play = simulation.results.find(p => p.playNumber === playNumber);
  
  if (!play) {
    return res.status(404).json({ error: 'Play not found' });
  }
  
  res.json({ games: play.games });
});

// Get hands for a specific game
app.get('/api/games/:gameId/hands', (req, res) => {
  // Simple implementation - find game across all simulations
  for (const simulation of simulations.values()) {
    for (const play of simulation.results) {
      const game = play.games.find(g => g.gameId === req.params.gameId);
      if (game) {
        return res.json({ hands: game.hands });
      }
    }
  }
  
  res.status(404).json({ error: 'Game not found' });
});

// Get all plays for a simulation
app.get('/api/simulations/:id/plays', (req, res) => {
  const simulation = simulations.get(req.params.id);
  if (!simulation) {
    return res.status(404).json({ error: 'Simulation not found' });
  }
  
  const plays = simulation.results.map(play => ({
    playNumber: play.playNumber,
    totalGames: play.games.length,
    totalHands: play.games.reduce((sum, game) => sum + game.totalHands, 0)
  }));
  
  res.json({ plays });
});

// Start server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`âœ… Simple Baccarat Server running on http://localhost:${PORT}`);
  console.log('âœ… Mock data mode - no database required');
  console.log(`ðŸ“Š Health check available at: http://localhost:${PORT}/api/health`);
});

// Handle graceful shutdown
process.on('SIGINT', () => {
  console.log('\nðŸ§¹ Simple server shutting down...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nðŸ§¹ Simple server shutting down...');
  process.exit(0);
}); 